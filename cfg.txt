brainfric statement grammar specification
============================================
Rules:
[StatementList]  | [StatementList]
                   [Statement]
[StatementList]  | [Statement]
[Statement]      | [Declaration]
[Statement]      | [Move]
[Statement]      | [Set]
[Statement]      | [Inc]
[Statement]      | [Dec]
[Statement]      | [While]
[Declaration]    | [Type][IdentifierList]
[Type]           | bool
[Type]           | byte
[Type]           | short
[Type]           | array[Type]
[Move]           | [IdentifierList]<-[Expression]
[Set]            | [IdentifierList]<=[Expression]
[Inc]            | inc[Identifier][Expression]
[Inc]            | inc[Identifier]
[Dec]            | dec[Identifier][Expression]
[Dec]            | dec[Identifier]
[IdentifierList] | [IdentifierList],[Identifier]
[IdentifierList] | [Identifier]
[Identifier]     | [Identifier].[NumberLiteral]
[Identifier]     | [Identifier].[Identifier]
[Identifier]     | [Identifier]@[Expression]
[Expression]     | [Literal]
[Expression]     | [Identifier]
[Expression]     | [UnaryOperator][Expression]
[Expression]     | ([Expression])
[Expression]     | [Expression][BinaryOperator][Expression]
[Literal]        | [BoolLiteral]
[Literal]        | [NumberLiteral]
[Literal]        | [StringLiteral]
[BoolLiteral]    | true
[BoolLiteral]    | false
[UnaryOperator]  | ?
[UnaryOperator]  | #
[UnaryOperator]  | ##
[UnaryOperator]  | !
[BinaryOperator] | +
[BinaryOperator] | -
[BinaryOperator] | *
[BinaryOperator] | /
[BinaryOperator] | |
[BinaryOperator] | &
[While]          | while[Expression]
                   [StatementList]
                   end
============================================
